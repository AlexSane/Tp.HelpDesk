//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Hd.Portal.CommentService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommentServiceSoap", Namespace="http://targetprocess.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTransferObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class CommentServiceWse : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback RetrieveAllForGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllForOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllForCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CommentServiceWse() {
            this.Url = global::Hd.Portal.Properties.Settings.Default.Hd_Portal_CommentService_CommentService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RetrieveAllForGeneralCompletedEventHandler RetrieveAllForGeneralCompleted;
        
        /// <remarks/>
        public event RetrieveAllForOwnerCompletedEventHandler RetrieveAllForOwnerCompleted;
        
        /// <remarks/>
        public event RetrieveAllForCommentCompletedEventHandler RetrieveAllForCommentCompleted;
        
        /// <remarks/>
        public event GetByIDCompletedEventHandler GetByIDCompleted;
        
        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;
        
        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;
        
        /// <remarks/>
        public event RetrievePageCompletedEventHandler RetrievePageCompleted;
        
        /// <remarks/>
        public event RetrieveCountCompletedEventHandler RetrieveCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForGeneral", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForGeneral(int generalID) {
            object[] results = this.Invoke("RetrieveAllForGeneral", new object[] {
                        generalID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForGeneralAsync(int generalID) {
            this.RetrieveAllForGeneralAsync(generalID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForGeneralAsync(int generalID, object userState) {
            if ((this.RetrieveAllForGeneralOperationCompleted == null)) {
                this.RetrieveAllForGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForGeneralOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForGeneral", new object[] {
                        generalID}, this.RetrieveAllForGeneralOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForGeneralOperationCompleted(object arg) {
            if ((this.RetrieveAllForGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForGeneralCompleted(this, new RetrieveAllForGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForOwner", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForOwner(int ownerID) {
            object[] results = this.Invoke("RetrieveAllForOwner", new object[] {
                        ownerID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID) {
            this.RetrieveAllForOwnerAsync(ownerID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID, object userState) {
            if ((this.RetrieveAllForOwnerOperationCompleted == null)) {
                this.RetrieveAllForOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForOwnerOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForOwner", new object[] {
                        ownerID}, this.RetrieveAllForOwnerOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForOwnerOperationCompleted(object arg) {
            if ((this.RetrieveAllForOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForOwnerCompleted(this, new RetrieveAllForOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForComment", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForComment(int parentID) {
            object[] results = this.Invoke("RetrieveAllForComment", new object[] {
                        parentID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForCommentAsync(int parentID) {
            this.RetrieveAllForCommentAsync(parentID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForCommentAsync(int parentID, object userState) {
            if ((this.RetrieveAllForCommentOperationCompleted == null)) {
                this.RetrieveAllForCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForCommentOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForComment", new object[] {
                        parentID}, this.RetrieveAllForCommentOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForCommentOperationCompleted(object arg) {
            if ((this.RetrieveAllForCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForCommentCompleted(this, new RetrieveAllForCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetByID", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO GetByID(int id) {
            object[] results = this.Invoke("GetByID", new object[] {
                        id});
            return ((CommentDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetByIDAsync(int id) {
            this.GetByIDAsync(id, null);
        }
        
        /// <remarks/>
        public void GetByIDAsync(int id, object userState) {
            if ((this.GetByIDOperationCompleted == null)) {
                this.GetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByIDOperationCompleted);
            }
            this.InvokeAsync("GetByID", new object[] {
                        id}, this.GetByIDOperationCompleted, userState);
        }
        
        private void OnGetByIDOperationCompleted(object arg) {
            if ((this.GetByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByIDCompleted(this, new GetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Create", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Create(CommentDTO entity) {
            object[] results = this.Invoke("Create", new object[] {
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAsync(CommentDTO entity) {
            this.CreateAsync(entity, null);
        }
        
        /// <remarks/>
        public void CreateAsync(CommentDTO entity, object userState) {
            if ((this.CreateOperationCompleted == null)) {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                        entity}, this.CreateOperationCompleted, userState);
        }
        
        private void OnCreateOperationCompleted(object arg) {
            if ((this.CreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Update", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(CommentDTO entity) {
            this.Invoke("Update", new object[] {
                        entity});
        }
        
        /// <remarks/>
        public void UpdateAsync(CommentDTO entity) {
            this.UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(CommentDTO entity, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        entity}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Delete", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(int id) {
            this.Invoke("Delete", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void DeleteAsync(int id) {
            this.DeleteAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(int id, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        id}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAll", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAll() {
            object[] results = this.Invoke("RetrieveAll", new object[0]);
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllAsync() {
            this.RetrieveAllAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveAllAsync(object userState) {
            if ((this.RetrieveAllOperationCompleted == null)) {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[0], this.RetrieveAllOperationCompleted, userState);
        }
        
        private void OnRetrieveAllOperationCompleted(object arg) {
            if ((this.RetrieveAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Retrieve", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] Retrieve(string hql, object[] parameters) {
            object[] results = this.Invoke("Retrieve", new object[] {
                        hql,
                        parameters});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters) {
            this.RetrieveAsync(hql, parameters, null);
        }
        
        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters, object userState) {
            if ((this.RetrieveOperationCompleted == null)) {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                        hql,
                        parameters}, this.RetrieveOperationCompleted, userState);
        }
        
        private void OnRetrieveOperationCompleted(object arg) {
            if ((this.RetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrievePage", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrievePage(string hql, int page, int pageSize, object[] parameters) {
            object[] results = this.Invoke("RetrievePage", new object[] {
                        hql,
                        page,
                        pageSize,
                        parameters});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters) {
            this.RetrievePageAsync(hql, page, pageSize, parameters, null);
        }
        
        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters, object userState) {
            if ((this.RetrievePageOperationCompleted == null)) {
                this.RetrievePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePageOperationCompleted);
            }
            this.InvokeAsync("RetrievePage", new object[] {
                        hql,
                        page,
                        pageSize,
                        parameters}, this.RetrievePageOperationCompleted, userState);
        }
        
        private void OnRetrievePageOperationCompleted(object arg) {
            if ((this.RetrievePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePageCompleted(this, new RetrievePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCount", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetrieveCount(string hql, object[] parameters) {
            object[] results = this.Invoke("RetrieveCount", new object[] {
                        hql,
                        parameters});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters) {
            this.RetrieveCountAsync(hql, parameters, null);
        }
        
        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters, object userState) {
            if ((this.RetrieveCountOperationCompleted == null)) {
                this.RetrieveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCountOperationCompleted);
            }
            this.InvokeAsync("RetrieveCount", new object[] {
                        hql,
                        parameters}, this.RetrieveCountOperationCompleted, userState);
        }
        
        private void OnRetrieveCountOperationCompleted(object arg) {
            if ((this.RetrieveCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCountCompleted(this, new RetrieveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommentServiceSoap", Namespace="http://targetprocess.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTransferObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class CommentService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RetrieveAllForGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllForOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllForCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CommentService() {
            this.Url = global::Hd.Portal.Properties.Settings.Default.Hd_Portal_CommentService_CommentService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RetrieveAllForGeneralCompletedEventHandler RetrieveAllForGeneralCompleted;
        
        /// <remarks/>
        public event RetrieveAllForOwnerCompletedEventHandler RetrieveAllForOwnerCompleted;
        
        /// <remarks/>
        public event RetrieveAllForCommentCompletedEventHandler RetrieveAllForCommentCompleted;
        
        /// <remarks/>
        public event GetByIDCompletedEventHandler GetByIDCompleted;
        
        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;
        
        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;
        
        /// <remarks/>
        public event RetrievePageCompletedEventHandler RetrievePageCompleted;
        
        /// <remarks/>
        public event RetrieveCountCompletedEventHandler RetrieveCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForGeneral", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForGeneral(int generalID) {
            object[] results = this.Invoke("RetrieveAllForGeneral", new object[] {
                        generalID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForGeneralAsync(int generalID) {
            this.RetrieveAllForGeneralAsync(generalID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForGeneralAsync(int generalID, object userState) {
            if ((this.RetrieveAllForGeneralOperationCompleted == null)) {
                this.RetrieveAllForGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForGeneralOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForGeneral", new object[] {
                        generalID}, this.RetrieveAllForGeneralOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForGeneralOperationCompleted(object arg) {
            if ((this.RetrieveAllForGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForGeneralCompleted(this, new RetrieveAllForGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForOwner", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForOwner(int ownerID) {
            object[] results = this.Invoke("RetrieveAllForOwner", new object[] {
                        ownerID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID) {
            this.RetrieveAllForOwnerAsync(ownerID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID, object userState) {
            if ((this.RetrieveAllForOwnerOperationCompleted == null)) {
                this.RetrieveAllForOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForOwnerOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForOwner", new object[] {
                        ownerID}, this.RetrieveAllForOwnerOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForOwnerOperationCompleted(object arg) {
            if ((this.RetrieveAllForOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForOwnerCompleted(this, new RetrieveAllForOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForComment", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAllForComment(int parentID) {
            object[] results = this.Invoke("RetrieveAllForComment", new object[] {
                        parentID});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllForCommentAsync(int parentID) {
            this.RetrieveAllForCommentAsync(parentID, null);
        }
        
        /// <remarks/>
        public void RetrieveAllForCommentAsync(int parentID, object userState) {
            if ((this.RetrieveAllForCommentOperationCompleted == null)) {
                this.RetrieveAllForCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForCommentOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForComment", new object[] {
                        parentID}, this.RetrieveAllForCommentOperationCompleted, userState);
        }
        
        private void OnRetrieveAllForCommentOperationCompleted(object arg) {
            if ((this.RetrieveAllForCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForCommentCompleted(this, new RetrieveAllForCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetByID", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO GetByID(int id) {
            object[] results = this.Invoke("GetByID", new object[] {
                        id});
            return ((CommentDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetByIDAsync(int id) {
            this.GetByIDAsync(id, null);
        }
        
        /// <remarks/>
        public void GetByIDAsync(int id, object userState) {
            if ((this.GetByIDOperationCompleted == null)) {
                this.GetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByIDOperationCompleted);
            }
            this.InvokeAsync("GetByID", new object[] {
                        id}, this.GetByIDOperationCompleted, userState);
        }
        
        private void OnGetByIDOperationCompleted(object arg) {
            if ((this.GetByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByIDCompleted(this, new GetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Create", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Create(CommentDTO entity) {
            object[] results = this.Invoke("Create", new object[] {
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAsync(CommentDTO entity) {
            this.CreateAsync(entity, null);
        }
        
        /// <remarks/>
        public void CreateAsync(CommentDTO entity, object userState) {
            if ((this.CreateOperationCompleted == null)) {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                        entity}, this.CreateOperationCompleted, userState);
        }
        
        private void OnCreateOperationCompleted(object arg) {
            if ((this.CreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Update", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(CommentDTO entity) {
            this.Invoke("Update", new object[] {
                        entity});
        }
        
        /// <remarks/>
        public void UpdateAsync(CommentDTO entity) {
            this.UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(CommentDTO entity, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        entity}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Delete", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(int id) {
            this.Invoke("Delete", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void DeleteAsync(int id) {
            this.DeleteAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(int id, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        id}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAll", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveAll() {
            object[] results = this.Invoke("RetrieveAll", new object[0]);
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllAsync() {
            this.RetrieveAllAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveAllAsync(object userState) {
            if ((this.RetrieveAllOperationCompleted == null)) {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[0], this.RetrieveAllOperationCompleted, userState);
        }
        
        private void OnRetrieveAllOperationCompleted(object arg) {
            if ((this.RetrieveAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Retrieve", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] Retrieve(string hql, object[] parameters) {
            object[] results = this.Invoke("Retrieve", new object[] {
                        hql,
                        parameters});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters) {
            this.RetrieveAsync(hql, parameters, null);
        }
        
        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters, object userState) {
            if ((this.RetrieveOperationCompleted == null)) {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                        hql,
                        parameters}, this.RetrieveOperationCompleted, userState);
        }
        
        private void OnRetrieveOperationCompleted(object arg) {
            if ((this.RetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrievePage", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrievePage(string hql, int page, int pageSize, object[] parameters) {
            object[] results = this.Invoke("RetrievePage", new object[] {
                        hql,
                        page,
                        pageSize,
                        parameters});
            return ((CommentDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters) {
            this.RetrievePageAsync(hql, page, pageSize, parameters, null);
        }
        
        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters, object userState) {
            if ((this.RetrievePageOperationCompleted == null)) {
                this.RetrievePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePageOperationCompleted);
            }
            this.InvokeAsync("RetrievePage", new object[] {
                        hql,
                        page,
                        pageSize,
                        parameters}, this.RetrievePageOperationCompleted, userState);
        }
        
        private void OnRetrievePageOperationCompleted(object arg) {
            if ((this.RetrievePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePageCompleted(this, new RetrievePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCount", RequestNamespace="http://targetprocess.com", ResponseNamespace="http://targetprocess.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetrieveCount(string hql, object[] parameters) {
            object[] results = this.Invoke("RetrieveCount", new object[] {
                        hql,
                        parameters});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters) {
            this.RetrieveCountAsync(hql, parameters, null);
        }
        
        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters, object userState) {
            if ((this.RetrieveCountOperationCompleted == null)) {
                this.RetrieveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCountOperationCompleted);
            }
            this.InvokeAsync("RetrieveCount", new object[] {
                        hql,
                        parameters}, this.RetrieveCountOperationCompleted, userState);
        }
        
        private void OnRetrieveCountOperationCompleted(object arg) {
            if ((this.RetrieveCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCountCompleted(this, new RetrieveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://targetprocess.com")]
    public partial class CommentDTO : DataTransferObject {
        
        private System.Nullable<int> commentIDField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> createDateField;
        
        private System.Nullable<int> generalIDField;
        
        private System.Nullable<int> ownerIDField;
        
        private System.Nullable<int> parentIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CommentID {
            get {
                return this.commentIDField;
            }
            set {
                this.commentIDField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GeneralID {
            get {
                return this.generalIDField;
            }
            set {
                this.generalIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OwnerID {
            get {
                return this.ownerIDField;
            }
            set {
                this.ownerIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ParentID {
            get {
                return this.parentIDField;
            }
            set {
                this.parentIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://targetprocess.com")]
    public abstract partial class DataTransferObject {
        
        private System.Nullable<int> idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveAllForGeneralCompletedEventHandler(object sender, RetrieveAllForGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllForGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveAllForOwnerCompletedEventHandler(object sender, RetrieveAllForOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveAllForCommentCompletedEventHandler(object sender, RetrieveAllForCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllForCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetByIDCompletedEventHandler(object sender, GetByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CreateCompletedEventHandler(object sender, CreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveAllCompletedEventHandler(object sender, RetrieveAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrievePageCompletedEventHandler(object sender, RetrievePageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrievePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveCountCompletedEventHandler(object sender, RetrieveCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591